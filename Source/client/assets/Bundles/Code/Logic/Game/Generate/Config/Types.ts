//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


export class Vector2 {
    static deserializeFromJson(json: any): Vector2 {
        let x = json.x
        let y = json.y
        if (x == null || y == null) {
            throw new Error()
        }
        return new Vector2(x, y)
    }

    x: number
    y: number
    constructor(x: number = 0, y: number = 0) {
        this.x = x
        this.y = y
    }
}

export class Vector3 {
    static deserializeFromJson(json: any): Vector3 {
        let x = json.x
        let y = json.y
        let z = json.z
        if (x == null || y == null || z == null) {
            throw new Error()
        }
        return new Vector3(x, y, z)
    }

    x: number
    y: number
    z: number

    constructor(x: number = 0, y: number = 0, z: number = 0) {
        this.x = x
        this.y = y
        this.z = z
    }
}

export class Vector4 {
    static deserializeFromJson(json: any): Vector4 {
        let x = json.x
        let y = json.y
        let z = json.z
        let w = json.w
        if (x == null || y == null || z == null || w == null) {
            throw new Error()
        }
        return new Vector4(x, y, z, w)
    }
    
    x: number
    y: number
    z: number
    w: number

    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {
        this.x = x
        this.y = y
        this.z = z
        this.w = w
    }
}



export enum UnitType {
    /**
     * 玩家
     */
    Player = 1,
    /**
     * 怪物
     */
    Monster = 2,
    NPC = 3,
}



export enum NumericType {
    Speed = 1000,
    AOI = 1002,
}



export class UnitConfigCategory{
    private _dataMap: Map<number, UnitConfig>
    private _dataList: UnitConfig[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, UnitConfig>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: UnitConfig
            _v = new UnitConfig(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.Id, _v)
        }
    }

    getDataMap(): Map<number, UnitConfig> { return this._dataMap; }
    getDataList(): UnitConfig[] { return this._dataList; }

    get(key: number): UnitConfig | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }

        //@ts-ignore
        if (this.afterEndInit) {
            //@ts-ignore
            this.afterEndInit()
        }
    }

}





export class UnitConfig {

    constructor(_json_: any) {
        if (_json_.Id === undefined) { throw new Error() }
        this.Id = _json_.Id
        if (_json_.Type === undefined) { throw new Error() }
        this.Type = _json_.Type
        if (_json_.Name === undefined) { throw new Error() }
        this.Name = _json_.Name
        if (_json_.Desc === undefined) { throw new Error() }
        this.Desc = _json_.Desc
    }

    /**
     * id
     */
    readonly Id: number
    /**
     * 类型
     */
    readonly Type: UnitType
    /**
     * 名字
     */
    readonly Name: string
    /**
     * 描述
     */
    readonly Desc: string

    resolve(_tables: Map<string, any>) {

        //@ts-ignore
        if (this.afterEndInit) {
            //@ts-ignore
            this.afterEndInit()
        }
    }
}




type JsonLoader = (file: Array<string>) => any

export class Tables {
    private static _UnitConfigCategory: UnitConfigCategory
    static get UnitConfigCategory(): UnitConfigCategory  { return this._UnitConfigCategory;}

    public static async init(loader: JsonLoader) {
        let tables = new Map<string, any>()
        let loadList: Array<string> = new Array

        loadList.push('unitconfigcategory')

        let dataMap: Map<string, any> = await loader(loadList)

        this._UnitConfigCategory = new UnitConfigCategory(dataMap.get('unitconfigcategory'))
        tables.set('UnitConfigCategory', this._UnitConfigCategory)

        this._UnitConfigCategory.resolve(tables)
    }
}
