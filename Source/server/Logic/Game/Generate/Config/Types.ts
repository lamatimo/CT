//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


export class Vector2 {
    static deserializeFromJson(json: any): Vector2 {
        let x = json.x
        let y = json.y
        if (x == null || y == null) {
            throw new Error()
        }
        return new Vector2(x, y)
    }

    x: number
    y: number
    constructor(x: number = 0, y: number = 0) {
        this.x = x
        this.y = y
    }
}

export class Vector3 {
    static deserializeFromJson(json: any): Vector3 {
        let x = json.x
        let y = json.y
        let z = json.z
        if (x == null || y == null || z == null) {
            throw new Error()
        }
        return new Vector3(x, y, z)
    }

    x: number
    y: number
    z: number

    constructor(x: number = 0, y: number = 0, z: number = 0) {
        this.x = x
        this.y = y
        this.z = z
    }
}

export class Vector4 {
    static deserializeFromJson(json: any): Vector4 {
        let x = json.x
        let y = json.y
        let z = json.z
        let w = json.w
        if (x == null || y == null || z == null || w == null) {
            throw new Error()
        }
        return new Vector4(x, y, z, w)
    }
    
    x: number
    y: number
    z: number
    w: number

    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {
        this.x = x
        this.y = y
        this.z = z
        this.w = w
    }
}



export enum ETestQuality {
    /**
     * 最高品质
     */
    A = 1,
    /**
     * 黑色的
     */
    B = 2,
    /**
     * 蓝色的
     */
    C = 3,
    /**
     * 最差品质
     */
    D = 4,
}



export enum AccessFlag {
    WRITE = 1,
    READ = 2,
    TRUNCATE = 4,
    NEW = 8,
    READ_WRITE = WRITE|READ,
}



export class LevelInfoConfigCategory{
    private _dataMap: Map<number, LevelInfoConfig>
    private _dataList: LevelInfoConfig[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, LevelInfoConfig>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: LevelInfoConfig
            _v = new LevelInfoConfig(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.Id, _v)
        }
    }

    getDataMap(): Map<number, LevelInfoConfig> { return this._dataMap; }
    getDataList(): LevelInfoConfig[] { return this._dataList; }

    get(key: number): LevelInfoConfig | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }

        //@ts-ignore
        if (this.afterEndInit) {
            //@ts-ignore
            this.afterEndInit()
        }
    }

}





export class LevelInfoConfig {

    constructor(_json_: any) {
        if (_json_.Id === undefined) { throw new Error() }
        this.Id = _json_.Id
        if (_json_.Type === undefined) { throw new Error() }
        this.Type = _json_.Type
        if (_json_.Name === undefined) { throw new Error() }
        this.Name = _json_.Name
        if (_json_.Desc === undefined) { throw new Error() }
        this.Desc = _json_.Desc
    }

    /**
     * id
     */
    readonly Id: number
    /**
     * 类型
     */
    readonly Type: string
    /**
     * 名字
     */
    readonly Name: string
    /**
     * 描述
     */
    readonly Desc: string

    resolve(_tables: Map<string, any>) {

        //@ts-ignore
        if (this.afterEndInit) {
            //@ts-ignore
            this.afterEndInit()
        }
    }
}




export class ItemConfigCategory{
    private _dataMap: Map<number, ItemConfig>
    private _dataList: ItemConfig[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, ItemConfig>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: ItemConfig
            _v = new ItemConfig(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, ItemConfig> { return this._dataMap; }
    getDataList(): ItemConfig[] { return this._dataList; }

    get(key: number): ItemConfig | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }

        //@ts-ignore
        if (this.afterEndInit) {
            //@ts-ignore
            this.afterEndInit()
        }
    }

}





export class ItemConfig {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.price === undefined) { throw new Error() }
        this.price = _json_.price
        if (_json_.upgrade_to_item_id === undefined) { throw new Error() }
        this.upgradeToItemId = _json_.upgrade_to_item_id
        if(_json_.expire_time != undefined) { this.expireTime = _json_.expire_time } else { this.expireTime = undefined }
        if (_json_.batch_useable === undefined) { throw new Error() }
        this.batchUseable = _json_.batch_useable
        if (_json_.exchange_stream === undefined) { throw new Error() }
        this.exchangeStream = _json_.exchange_stream
        if (_json_.exchange_list === undefined) { throw new Error() }
        this.exchangeList = _json_.exchange_list
    }

    /**
     * 这是id
     */
    readonly id: number
    /**
     * 名字
     */
    readonly name: string
    /**
     * 描述
     */
    readonly desc: string
    /**
     * 价格
     */
    readonly price: number
    /**
     * 引用当前表
     */
    readonly upgradeToItemId: number
    /**
     * 过期时间
     */
    readonly expireTime: number|undefined
    /**
     * 能否批量使用
     */
    readonly batchUseable: boolean
    /**
     * 道具兑换配置
     */
    readonly exchangeStream: string
    readonly exchangeList: string

    resolve(_tables: Map<string, any>) {

        //@ts-ignore
        if (this.afterEndInit) {
            //@ts-ignore
            this.afterEndInit()
        }
    }
}




export class StartMachineConfigCategory{
    private _dataMap: Map<number, StartMachineConfig>
    private _dataList: StartMachineConfig[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, StartMachineConfig>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: StartMachineConfig
            _v = new StartMachineConfig(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.Id, _v)
        }
    }

    getDataMap(): Map<number, StartMachineConfig> { return this._dataMap; }
    getDataList(): StartMachineConfig[] { return this._dataList; }

    get(key: number): StartMachineConfig | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }

        //@ts-ignore
        if (this.afterEndInit) {
            //@ts-ignore
            this.afterEndInit()
        }
    }

}





export class StartMachineConfig {

    constructor(_json_: any) {
        if (_json_.Id === undefined) { throw new Error() }
        this.Id = _json_.Id
        if (_json_.InnerIP === undefined) { throw new Error() }
        this.InnerIP = _json_.InnerIP
        if (_json_.OuterIP === undefined) { throw new Error() }
        this.OuterIP = _json_.OuterIP
        if (_json_.WatcherPort === undefined) { throw new Error() }
        this.WatcherPort = _json_.WatcherPort
    }

    /**
     * id
     */
    readonly Id: number
    /**
     * 内网地址
     */
    readonly InnerIP: string
    /**
     * 外网地址
     */
    readonly OuterIP: string
    /**
     * 守护进程端口
     */
    readonly WatcherPort: string

    resolve(_tables: Map<string, any>) {

        //@ts-ignore
        if (this.afterEndInit) {
            //@ts-ignore
            this.afterEndInit()
        }
    }
}




export class StartProcessConfigCategory{
    private _dataMap: Map<number, StartProcessConfig>
    private _dataList: StartProcessConfig[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, StartProcessConfig>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: StartProcessConfig
            _v = new StartProcessConfig(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.Id, _v)
        }
    }

    getDataMap(): Map<number, StartProcessConfig> { return this._dataMap; }
    getDataList(): StartProcessConfig[] { return this._dataList; }

    get(key: number): StartProcessConfig | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }

        //@ts-ignore
        if (this.afterEndInit) {
            //@ts-ignore
            this.afterEndInit()
        }
    }

}





export class StartProcessConfig {

    constructor(_json_: any) {
        if (_json_.Id === undefined) { throw new Error() }
        this.Id = _json_.Id
        if (_json_.MachineId === undefined) { throw new Error() }
        this.MachineId = _json_.MachineId
        if (_json_.InnerPort === undefined) { throw new Error() }
        this.InnerPort = _json_.InnerPort
    }

    /**
     * id
     */
    readonly Id: number
    /**
     * 所属机器
     */
    readonly MachineId: number
    /**
     * 内网端口
     */
    readonly InnerPort: number

    resolve(_tables: Map<string, any>) {

        //@ts-ignore
        if (this.afterEndInit) {
            //@ts-ignore
            this.afterEndInit()
        }
    }
}




export class StartSceneConfigCategory{
    private _dataMap: Map<number, StartSceneConfig>
    private _dataList: StartSceneConfig[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, StartSceneConfig>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: StartSceneConfig
            _v = new StartSceneConfig(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.Id, _v)
        }
    }

    getDataMap(): Map<number, StartSceneConfig> { return this._dataMap; }
    getDataList(): StartSceneConfig[] { return this._dataList; }

    get(key: number): StartSceneConfig | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }

        //@ts-ignore
        if (this.afterEndInit) {
            //@ts-ignore
            this.afterEndInit()
        }
    }

}





export class StartSceneConfig {

    constructor(_json_: any) {
        if (_json_.Id === undefined) { throw new Error() }
        this.Id = _json_.Id
        if (_json_.Process === undefined) { throw new Error() }
        this.Process = _json_.Process
        if (_json_.Zone === undefined) { throw new Error() }
        this.Zone = _json_.Zone
        if (_json_.SceneType === undefined) { throw new Error() }
        this.SceneType = _json_.SceneType
        if (_json_.Name === undefined) { throw new Error() }
        this.Name = _json_.Name
        if (_json_.OuterPort === undefined) { throw new Error() }
        this.OuterPort = _json_.OuterPort
    }

    /**
     * id
     */
    readonly Id: number
    /**
     * 所属进程
     */
    readonly Process: number
    /**
     * 所属区
     */
    readonly Zone: number
    /**
     * 类型
     */
    readonly SceneType: string
    /**
     * 名字
     */
    readonly Name: string
    /**
     * 外网端口
     */
    readonly OuterPort: number

    resolve(_tables: Map<string, any>) {

        //@ts-ignore
        if (this.afterEndInit) {
            //@ts-ignore
            this.afterEndInit()
        }
    }
}




export class StartZoneConfigCategory{
    private _dataMap: Map<number, StartZoneConfig>
    private _dataList: StartZoneConfig[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, StartZoneConfig>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: StartZoneConfig
            _v = new StartZoneConfig(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.Id, _v)
        }
    }

    getDataMap(): Map<number, StartZoneConfig> { return this._dataMap; }
    getDataList(): StartZoneConfig[] { return this._dataList; }

    get(key: number): StartZoneConfig | undefined { return this._dataMap.get(key); }

    resolve(_tables: Map<string, any>) {
        for(var v of this._dataList) {
            v.resolve(_tables)
        }

        //@ts-ignore
        if (this.afterEndInit) {
            //@ts-ignore
            this.afterEndInit()
        }
    }

}





export class StartZoneConfig {

    constructor(_json_: any) {
        if (_json_.Id === undefined) { throw new Error() }
        this.Id = _json_.Id
        if (_json_.DBConnection === undefined) { throw new Error() }
        this.DBConnection = _json_.DBConnection
        if (_json_.DBName === undefined) { throw new Error() }
        this.DBName = _json_.DBName
    }

    /**
     * id
     */
    readonly Id: number
    /**
     * 数据库地址
     */
    readonly DBConnection: string
    /**
     * 数据库名
     */
    readonly DBName: string

    resolve(_tables: Map<string, any>) {

        //@ts-ignore
        if (this.afterEndInit) {
            //@ts-ignore
            this.afterEndInit()
        }
    }
}




type JsonLoader = (file: Array<string>) => any

export class Tables {
    private static _LevelInfoConfigCategory: LevelInfoConfigCategory
    static get LevelInfoConfigCategory(): LevelInfoConfigCategory  { return this._LevelInfoConfigCategory;}
    private static _ItemConfigCategory: ItemConfigCategory
    static get ItemConfigCategory(): ItemConfigCategory  { return this._ItemConfigCategory;}
    private static _StartMachineConfigCategory: StartMachineConfigCategory
    static get StartMachineConfigCategory(): StartMachineConfigCategory  { return this._StartMachineConfigCategory;}
    private static _StartProcessConfigCategory: StartProcessConfigCategory
    static get StartProcessConfigCategory(): StartProcessConfigCategory  { return this._StartProcessConfigCategory;}
    private static _StartSceneConfigCategory: StartSceneConfigCategory
    static get StartSceneConfigCategory(): StartSceneConfigCategory  { return this._StartSceneConfigCategory;}
    private static _StartZoneConfigCategory: StartZoneConfigCategory
    static get StartZoneConfigCategory(): StartZoneConfigCategory  { return this._StartZoneConfigCategory;}

    public static async init(loader: JsonLoader) {
        let tables = new Map<string, any>()
        let loadList: Array<string> = new Array

        loadList.push('levelinfoconfigcategory')
        loadList.push('itemconfigcategory')
        loadList.push('startmachineconfigcategory')
        loadList.push('startprocessconfigcategory')
        loadList.push('startsceneconfigcategory')
        loadList.push('startzoneconfigcategory')

        let dataMap: Map<string, any> = await loader(loadList)

        this._LevelInfoConfigCategory = new LevelInfoConfigCategory(dataMap.get('levelinfoconfigcategory'))
        tables.set('LevelInfoConfigCategory', this._LevelInfoConfigCategory)
        this._ItemConfigCategory = new ItemConfigCategory(dataMap.get('itemconfigcategory'))
        tables.set('ItemConfigCategory', this._ItemConfigCategory)
        this._StartMachineConfigCategory = new StartMachineConfigCategory(dataMap.get('startmachineconfigcategory'))
        tables.set('StartMachineConfigCategory', this._StartMachineConfigCategory)
        this._StartProcessConfigCategory = new StartProcessConfigCategory(dataMap.get('startprocessconfigcategory'))
        tables.set('StartProcessConfigCategory', this._StartProcessConfigCategory)
        this._StartSceneConfigCategory = new StartSceneConfigCategory(dataMap.get('startsceneconfigcategory'))
        tables.set('StartSceneConfigCategory', this._StartSceneConfigCategory)
        this._StartZoneConfigCategory = new StartZoneConfigCategory(dataMap.get('startzoneconfigcategory'))
        tables.set('StartZoneConfigCategory', this._StartZoneConfigCategory)

        this._LevelInfoConfigCategory.resolve(tables)
        this._ItemConfigCategory.resolve(tables)
        this._StartMachineConfigCategory.resolve(tables)
        this._StartProcessConfigCategory.resolve(tables)
        this._StartSceneConfigCategory.resolve(tables)
        this._StartZoneConfigCategory.resolve(tables)
    }
}
